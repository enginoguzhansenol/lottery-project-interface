{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBase64 = exports.decodeBase64 = void 0;\n/**\n *  [Base64 encoding](link-wiki-base64) using 6-bit words to encode\n *  arbitrary bytes into a string using 65 printable symbols, the\n *  upper-case and lower-case alphabet, the digits ``0`` through ``9``,\n *  ``\"+\"`` and ``\"/\"`` with the ``\"=\"`` used for padding.\n *\n *  @_subsection: api/utils:Base64 Encoding  [about-base64]\n */\nconst data_js_1 = require(\"./data.js\");\n/**\n *  Decodes the base-64 encoded %%value%%.\n *\n *  @example:\n *    // The decoded value is always binary data...\n *    result = decodeBase64(\"SGVsbG8gV29ybGQhIQ==\")\n *    //_result:\n *\n *    // ...use toUtf8String to convert it to a string.\n *    toUtf8String(result)\n *    //_result:\n *\n *    // Decoding binary data\n *    decodeBase64(\"EjQ=\")\n *    //_result:\n */\nfunction decodeBase64(value) {\n  return (0, data_js_1.getBytesCopy)(Buffer.from(value, \"base64\"));\n}\nexports.decodeBase64 = decodeBase64;\n;\n/**\n *  Encodes %%data%% as a base-64 encoded string.\n *\n *  @example:\n *    // Encoding binary data as a hexstring\n *    encodeBase64(\"0x1234\")\n *    //_result:\n *\n *    // Encoding binary data as a Uint8Array\n *    encodeBase64(new Uint8Array([ 0x12, 0x34 ]))\n *    //_result:\n *\n *    // The input MUST be data...\n *    encodeBase64(\"Hello World!!\")\n *    //_error:\n *\n *    // ...use toUtf8Bytes for this.\n *    encodeBase64(toUtf8Bytes(\"Hello World!!\"))\n *    //_result:\n */\nfunction encodeBase64(data) {\n  return Buffer.from((0, data_js_1.getBytes)(data)).toString(\"base64\");\n}\nexports.encodeBase64 = encodeBase64;","map":{"version":3,"names":["data_js_1","require","decodeBase64","value","getBytesCopy","Buffer","from","exports","encodeBase64","data","getBytes","toString"],"sources":["/Users/oguzhansenol/Developer/Repositories/lottery-project-interface/node_modules/ethers/src.ts/utils/base64.ts"],"sourcesContent":["/**\n *  [Base64 encoding](link-wiki-base64) using 6-bit words to encode\n *  arbitrary bytes into a string using 65 printable symbols, the\n *  upper-case and lower-case alphabet, the digits ``0`` through ``9``,\n *  ``\"+\"`` and ``\"/\"`` with the ``\"=\"`` used for padding.\n *\n *  @_subsection: api/utils:Base64 Encoding  [about-base64]\n */\nimport { getBytes, getBytesCopy } from \"./data.js\";\n\nimport type { BytesLike } from \"./data.js\";\n\n\n/**\n *  Decodes the base-64 encoded %%value%%.\n *\n *  @example:\n *    // The decoded value is always binary data...\n *    result = decodeBase64(\"SGVsbG8gV29ybGQhIQ==\")\n *    //_result:\n *\n *    // ...use toUtf8String to convert it to a string.\n *    toUtf8String(result)\n *    //_result:\n *\n *    // Decoding binary data\n *    decodeBase64(\"EjQ=\")\n *    //_result:\n */\nexport function decodeBase64(value: string): Uint8Array {\n    return getBytesCopy(Buffer.from(value, \"base64\"));\n};\n\n/**\n *  Encodes %%data%% as a base-64 encoded string.\n *\n *  @example:\n *    // Encoding binary data as a hexstring\n *    encodeBase64(\"0x1234\")\n *    //_result:\n *\n *    // Encoding binary data as a Uint8Array\n *    encodeBase64(new Uint8Array([ 0x12, 0x34 ]))\n *    //_result:\n *\n *    // The input MUST be data...\n *    encodeBase64(\"Hello World!!\")\n *    //_error:\n *\n *    // ...use toUtf8Bytes for this.\n *    encodeBase64(toUtf8Bytes(\"Hello World!!\"))\n *    //_result:\n */\nexport function encodeBase64(data: BytesLike): string {\n    return Buffer.from(getBytes(data)).toString(\"base64\");\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;AAQA,MAAAA,SAAA,GAAAC,OAAA;AAKA;;;;;;;;;;;;;;;;AAgBA,SAAgBC,YAAYA,CAACC,KAAa;EACtC,OAAO,IAAAH,SAAA,CAAAI,YAAY,EAACC,MAAM,CAACC,IAAI,CAACH,KAAK,EAAE,QAAQ,CAAC,CAAC;AACrD;AAFAI,OAAA,CAAAL,YAAA,GAAAA,YAAA;AAEC;AAED;;;;;;;;;;;;;;;;;;;;AAoBA,SAAgBM,YAAYA,CAACC,IAAe;EACxC,OAAOJ,MAAM,CAACC,IAAI,CAAC,IAAAN,SAAA,CAAAU,QAAQ,EAACD,IAAI,CAAC,CAAC,CAACE,QAAQ,CAAC,QAAQ,CAAC;AACzD;AAFAJ,OAAA,CAAAC,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}