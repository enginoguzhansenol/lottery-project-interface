{"ast":null,"code":"\"use strict\";\n\n/**\n *  About Subclassing the Provider...\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractProvider = exports.UnmanagedSubscriber = void 0;\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../constants/index.js\");\nconst index_js_3 = require(\"../contract/index.js\");\nconst index_js_4 = require(\"../hash/index.js\");\nconst index_js_5 = require(\"../transaction/index.js\");\nconst index_js_6 = require(\"../utils/index.js\");\nconst ens_resolver_js_1 = require(\"./ens-resolver.js\");\nconst format_js_1 = require(\"./format.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_js_1 = require(\"./provider.js\");\nconst subscriber_polling_js_1 = require(\"./subscriber-polling.js\");\n// Constants\nconst BN_2 = BigInt(2);\nconst MAX_CCIP_REDIRECTS = 10;\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\nfunction getTag(prefix, value) {\n  return prefix + \":\" + JSON.stringify(value, (k, v) => {\n    if (v == null) {\n      return \"null\";\n    }\n    if (typeof v === \"bigint\") {\n      return `bigint:${v.toString()}`;\n    }\n    if (typeof v === \"string\") {\n      return v.toLowerCase();\n    }\n    // Sort object keys\n    if (typeof v === \"object\" && !Array.isArray(v)) {\n      const keys = Object.keys(v);\n      keys.sort();\n      return keys.reduce((accum, key) => {\n        accum[key] = v[key];\n        return accum;\n      }, {});\n    }\n    return v;\n  });\n}\nclass UnmanagedSubscriber {\n  name;\n  constructor(name) {\n    (0, index_js_6.defineProperties)(this, {\n      name\n    });\n  }\n  start() {}\n  stop() {}\n  pause(dropWhilePaused) {}\n  resume() {}\n}\nexports.UnmanagedSubscriber = UnmanagedSubscriber;\nfunction copy(value) {\n  return JSON.parse(JSON.stringify(value));\n}\nfunction concisify(items) {\n  items = Array.from(new Set(items).values());\n  items.sort();\n  return items;\n}\nasync function getSubscription(_event, provider) {\n  if (_event == null) {\n    throw new Error(\"invalid event\");\n  }\n  // Normalize topic array info an EventFilter\n  if (Array.isArray(_event)) {\n    _event = {\n      topics: _event\n    };\n  }\n  if (typeof _event === \"string\") {\n    switch (_event) {\n      case \"block\":\n      case \"pending\":\n      case \"debug\":\n      case \"network\":\n        {\n          return {\n            type: _event,\n            tag: _event\n          };\n        }\n    }\n  }\n  if ((0, index_js_6.isHexString)(_event, 32)) {\n    const hash = _event.toLowerCase();\n    return {\n      type: \"transaction\",\n      tag: getTag(\"tx\", {\n        hash\n      }),\n      hash\n    };\n  }\n  if (_event.orphan) {\n    const event = _event;\n    // @TODO: Should lowercase and whatnot things here instead of copy...\n    return {\n      type: \"orphan\",\n      tag: getTag(\"orphan\", event),\n      filter: copy(event)\n    };\n  }\n  if (_event.address || _event.topics) {\n    const event = _event;\n    const filter = {\n      topics: (event.topics || []).map(t => {\n        if (t == null) {\n          return null;\n        }\n        if (Array.isArray(t)) {\n          return concisify(t.map(t => t.toLowerCase()));\n        }\n        return t.toLowerCase();\n      })\n    };\n    if (event.address) {\n      const addresses = [];\n      const promises = [];\n      const addAddress = addr => {\n        if ((0, index_js_6.isHexString)(addr)) {\n          addresses.push(addr);\n        } else {\n          promises.push((async () => {\n            addresses.push(await (0, index_js_1.resolveAddress)(addr, provider));\n          })());\n        }\n      };\n      if (Array.isArray(event.address)) {\n        event.address.forEach(addAddress);\n      } else {\n        addAddress(event.address);\n      }\n      if (promises.length) {\n        await Promise.all(promises);\n      }\n      filter.address = concisify(addresses.map(a => a.toLowerCase()));\n    }\n    return {\n      filter,\n      tag: getTag(\"event\", filter),\n      type: \"event\"\n    };\n  }\n  (0, index_js_6.assertArgument)(false, \"unknown ProviderEvent\", \"event\", _event);\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nclass AbstractProvider {\n  #subs;\n  #plugins;\n  // null=unpaused, true=paused+dropWhilePaused, false=paused\n  #pausedState;\n  #networkPromise;\n  #anyNetwork;\n  #performCache;\n  // The most recent block number if running an event or -1 if no \"block\" event\n  #lastBlockNumber;\n  #nextTimer;\n  #timers;\n  #disableCcipRead;\n  // @TODO: This should be a () => Promise<Network> so network can be\n  // done when needed; or rely entirely on _detectNetwork?\n  constructor(_network) {\n    if (_network === \"any\") {\n      this.#anyNetwork = true;\n      this.#networkPromise = null;\n    } else if (_network) {\n      const network = network_js_1.Network.from(_network);\n      this.#anyNetwork = false;\n      this.#networkPromise = Promise.resolve(network);\n      setTimeout(() => {\n        this.emit(\"network\", network, null);\n      }, 0);\n    } else {\n      this.#anyNetwork = false;\n      this.#networkPromise = null;\n    }\n    this.#lastBlockNumber = -1;\n    this.#performCache = new Map();\n    this.#subs = new Map();\n    this.#plugins = new Map();\n    this.#pausedState = null;\n    this.#nextTimer = 1;\n    this.#timers = new Map();\n    this.#disableCcipRead = false;\n  }\n  get provider() {\n    return this;\n  }\n  get plugins() {\n    return Array.from(this.#plugins.values());\n  }\n  attachPlugin(plugin) {\n    if (this.#plugins.get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n    this.#plugins.set(plugin.name, plugin.connect(this));\n    return this;\n  }\n  getPlugin(name) {\n    return this.#plugins.get(name) || null;\n  }\n  get disableCcipRead() {\n    return this.#disableCcipRead;\n  }\n  set disableCcipRead(value) {\n    this.#disableCcipRead = !!value;\n  }\n  // Shares multiple identical requests made during the same 250ms\n  async #perform(req) {\n    // Create a tag\n    const tag = getTag(req.method, req);\n    let perform = this.#performCache.get(tag);\n    if (!perform) {\n      perform = this._perform(req);\n      this.#performCache.set(tag, perform);\n      setTimeout(() => {\n        if (this.#performCache.get(tag) === perform) {\n          this.#performCache.delete(tag);\n        }\n      }, 250);\n    }\n    return await perform;\n  }\n  async ccipReadFetch(tx, calldata, urls) {\n    if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\n      return null;\n    }\n    const sender = tx.to.toLowerCase();\n    const data = calldata.toLowerCase();\n    const errorMessages = [];\n    for (let i = 0; i < urls.length; i++) {\n      const url = urls[i];\n      // URL expansion\n      const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n      // If no {data} is present, use POST; otherwise GET\n      //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n      //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n      //    value.status = response.statusCode;\n      //    return value;\n      //});\n      const request = new index_js_6.FetchRequest(href);\n      if (url.indexOf(\"{data}\") === -1) {\n        request.body = {\n          data,\n          sender\n        };\n      }\n      this.emit(\"debug\", {\n        action: \"sendCcipReadFetchRequest\",\n        request,\n        index: i,\n        urls\n      });\n      let errorMessage = \"unknown error\";\n      const resp = await request.send();\n      try {\n        const result = resp.bodyJson;\n        if (result.data) {\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadFetchResult\",\n            request,\n            result\n          });\n          return result.data;\n        }\n        if (result.message) {\n          errorMessage = result.message;\n        }\n        this.emit(\"debug\", {\n          action: \"receiveCcipReadFetchError\",\n          request,\n          result\n        });\n      } catch (error) {}\n      // 4xx indicates the result is not present; stop\n      (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, \"OFFCHAIN_FAULT\", {\n        reason: \"404_MISSING_RESOURCE\",\n        transaction: tx,\n        info: {\n          url,\n          errorMessage\n        }\n      });\n      // 5xx indicates server issue; try the next url\n      errorMessages.push(errorMessage);\n    }\n    (0, index_js_6.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, \"OFFCHAIN_FAULT\", {\n      reason: \"500_SERVER_ERROR\",\n      transaction: tx,\n      info: {\n        urls,\n        errorMessages\n      }\n    });\n  }\n  _wrapBlock(value, network) {\n    return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);\n  }\n  _wrapLog(value, network) {\n    return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);\n  }\n  _wrapTransactionReceipt(value, network) {\n    return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);\n  }\n  _wrapTransactionResponse(tx, network) {\n    return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);\n  }\n  _detectNetwork() {\n    (0, index_js_6.assert)(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"_detectNetwork\"\n    });\n  }\n  // Sub-classes should override this and handle PerformActionRequest requests, calling\n  // the super for any unhandled actions.\n  async _perform(req) {\n    (0, index_js_6.assert)(false, `unsupported method: ${req.method}`, \"UNSUPPORTED_OPERATION\", {\n      operation: req.method,\n      info: req\n    });\n  }\n  // State\n  async getBlockNumber() {\n    const blockNumber = (0, index_js_6.getNumber)(await this.#perform({\n      method: \"getBlockNumber\"\n    }), \"%response\");\n    if (this.#lastBlockNumber >= 0) {\n      this.#lastBlockNumber = blockNumber;\n    }\n    return blockNumber;\n  }\n  _getAddress(address) {\n    return (0, index_js_1.resolveAddress)(address, this);\n  }\n  _getBlockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n    switch (blockTag) {\n      case \"earliest\":\n        return \"0x0\";\n      case \"latest\":\n      case \"pending\":\n      case \"safe\":\n      case \"finalized\":\n        return blockTag;\n    }\n    if ((0, index_js_6.isHexString)(blockTag)) {\n      if ((0, index_js_6.isHexString)(blockTag, 32)) {\n        return blockTag;\n      }\n      return (0, index_js_6.toQuantity)(blockTag);\n    }\n    if (typeof blockTag === \"bigint\") {\n      blockTag = (0, index_js_6.getNumber)(blockTag, \"blockTag\");\n    }\n    if (typeof blockTag === \"number\") {\n      if (blockTag >= 0) {\n        return (0, index_js_6.toQuantity)(blockTag);\n      }\n      if (this.#lastBlockNumber >= 0) {\n        return (0, index_js_6.toQuantity)(this.#lastBlockNumber + blockTag);\n      }\n      return this.getBlockNumber().then(b => (0, index_js_6.toQuantity)(b + blockTag));\n    }\n    (0, index_js_6.assertArgument)(false, \"invalid blockTag\", \"blockTag\", blockTag);\n  }\n  _getFilter(filter) {\n    // Create a canonical representation of the topics\n    const topics = (filter.topics || []).map(t => {\n      if (t == null) {\n        return null;\n      }\n      if (Array.isArray(t)) {\n        return concisify(t.map(t => t.toLowerCase()));\n      }\n      return t.toLowerCase();\n    });\n    const blockHash = \"blockHash\" in filter ? filter.blockHash : undefined;\n    const resolve = (_address, fromBlock, toBlock) => {\n      let address = undefined;\n      switch (_address.length) {\n        case 0:\n          break;\n        case 1:\n          address = _address[0];\n          break;\n        default:\n          _address.sort();\n          address = _address;\n      }\n      if (blockHash) {\n        if (fromBlock != null || toBlock != null) {\n          throw new Error(\"invalid filter\");\n        }\n      }\n      const filter = {};\n      if (address) {\n        filter.address = address;\n      }\n      if (topics.length) {\n        filter.topics = topics;\n      }\n      if (fromBlock) {\n        filter.fromBlock = fromBlock;\n      }\n      if (toBlock) {\n        filter.toBlock = toBlock;\n      }\n      if (blockHash) {\n        filter.blockHash = blockHash;\n      }\n      return filter;\n    };\n    // Addresses could be async (ENS names or Addressables)\n    let address = [];\n    if (filter.address) {\n      if (Array.isArray(filter.address)) {\n        for (const addr of filter.address) {\n          address.push(this._getAddress(addr));\n        }\n      } else {\n        address.push(this._getAddress(filter.address));\n      }\n    }\n    let fromBlock = undefined;\n    if (\"fromBlock\" in filter) {\n      fromBlock = this._getBlockTag(filter.fromBlock);\n    }\n    let toBlock = undefined;\n    if (\"toBlock\" in filter) {\n      toBlock = this._getBlockTag(filter.toBlock);\n    }\n    if (address.filter(a => typeof a !== \"string\").length || fromBlock != null && typeof fromBlock !== \"string\" || toBlock != null && typeof toBlock !== \"string\") {\n      return Promise.all([Promise.all(address), fromBlock, toBlock]).then(result => {\n        return resolve(result[0], result[1], result[2]);\n      });\n    }\n    return resolve(address, fromBlock, toBlock);\n  }\n  _getTransactionRequest(_request) {\n    const request = (0, provider_js_1.copyRequest)(_request);\n    const promises = [];\n    [\"to\", \"from\"].forEach(key => {\n      if (request[key] == null) {\n        return;\n      }\n      const addr = (0, index_js_1.resolveAddress)(request[key]);\n      if (isPromise(addr)) {\n        promises.push(async function () {\n          request[key] = await addr;\n        }());\n      } else {\n        request[key] = addr;\n      }\n    });\n    if (request.blockTag != null) {\n      const blockTag = this._getBlockTag(request.blockTag);\n      if (isPromise(blockTag)) {\n        promises.push(async function () {\n          request.blockTag = await blockTag;\n        }());\n      } else {\n        request.blockTag = blockTag;\n      }\n    }\n    if (promises.length) {\n      return async function () {\n        await Promise.all(promises);\n        return request;\n      }();\n    }\n    return request;\n  }\n  async getNetwork() {\n    // No explicit network was set and this is our first time\n    if (this.#networkPromise == null) {\n      // Detect the current network (shared with all calls)\n      const detectNetwork = this._detectNetwork().then(network => {\n        this.emit(\"network\", network, null);\n        return network;\n      }, error => {\n        // Reset the networkPromise on failure, so we will try again\n        if (this.#networkPromise === detectNetwork) {\n          this.#networkPromise = null;\n        }\n        throw error;\n      });\n      this.#networkPromise = detectNetwork;\n      return (await detectNetwork).clone();\n    }\n    const networkPromise = this.#networkPromise;\n    const [expected, actual] = await Promise.all([networkPromise, this._detectNetwork() // The actual connected network\n    ]);\n\n    if (expected.chainId !== actual.chainId) {\n      if (this.#anyNetwork) {\n        // The \"any\" network can change, so notify listeners\n        this.emit(\"network\", actual, expected);\n        // Update the network if something else hasn't already changed it\n        if (this.#networkPromise === networkPromise) {\n          this.#networkPromise = Promise.resolve(actual);\n        }\n      } else {\n        // Otherwise, we do not allow changes to the underlying network\n        (0, index_js_6.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, \"NETWORK_ERROR\", {\n          event: \"changed\"\n        });\n      }\n    }\n    return expected.clone();\n  }\n  async getFeeData() {\n    const {\n      block,\n      gasPrice\n    } = await (0, index_js_6.resolveProperties)({\n      block: this.getBlock(\"latest\"),\n      gasPrice: (async () => {\n        try {\n          const gasPrice = await this.#perform({\n            method: \"getGasPrice\"\n          });\n          return (0, index_js_6.getBigInt)(gasPrice, \"%response\");\n        } catch (error) {}\n        return null;\n      })()\n    });\n    let maxFeePerGas = null,\n      maxPriorityFeePerGas = null;\n    if (block && block.baseFeePerGas) {\n      // We may want to compute this more accurately in the future,\n      // using the formula \"check if the base fee is correct\".\n      // See: https://eips.ethereum.org/EIPS/eip-1559\n      maxPriorityFeePerGas = BigInt(\"1000000000\");\n      // Allow a network to override their maximum priority fee per gas\n      //const priorityFeePlugin = (await this.getNetwork()).getPlugin<MaxPriorityFeePlugin>(\"org.ethers.plugins.max-priority-fee\");\n      //if (priorityFeePlugin) {\n      //    maxPriorityFeePerGas = await priorityFeePlugin.getPriorityFee(this);\n      //}\n      maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;\n    }\n    return new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n  }\n  async estimateGas(_tx) {\n    let tx = this._getTransactionRequest(_tx);\n    if (isPromise(tx)) {\n      tx = await tx;\n    }\n    return (0, index_js_6.getBigInt)(await this.#perform({\n      method: \"estimateGas\",\n      transaction: tx\n    }), \"%response\");\n  }\n  async #call(tx, blockTag, attempt) {\n    (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n      reason: \"TOO_MANY_REDIRECTS\",\n      transaction: Object.assign({}, tx, {\n        blockTag,\n        enableCcipRead: true\n      })\n    });\n    // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n    const transaction = (0, provider_js_1.copyRequest)(tx);\n    try {\n      return (0, index_js_6.hexlify)(await this._perform({\n        method: \"call\",\n        transaction,\n        blockTag\n      }));\n    } catch (error) {\n      // CCIP Read OffchainLookup\n      if (!this.disableCcipRead && (0, index_js_6.isCallException)(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && (0, index_js_6.dataSlice)(error.data, 0, 4) === \"0x556f1830\") {\n        const data = error.data;\n        const txSender = await (0, index_js_1.resolveAddress)(transaction.to, this);\n        // Parse the CCIP Read Arguments\n        let ccipArgs;\n        try {\n          ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(error.data, 4));\n        } catch (error) {\n          (0, index_js_6.assert)(false, error.message, \"OFFCHAIN_FAULT\", {\n            reason: \"BAD_DATA\",\n            transaction,\n            info: {\n              data\n            }\n          });\n        }\n        // Check the sender of the OffchainLookup matches the transaction\n        (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n          action: \"call\",\n          data,\n          reason: \"OffchainLookup\",\n          transaction: transaction,\n          invocation: null,\n          revert: {\n            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n            name: \"OffchainLookup\",\n            args: ccipArgs.errorArgs\n          }\n        });\n        const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n        (0, index_js_6.assert)(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n          reason: \"FETCH_FAILED\",\n          transaction,\n          info: {\n            data: error.data,\n            errorArgs: ccipArgs.errorArgs\n          }\n        });\n        const tx = {\n          to: txSender,\n          data: (0, index_js_6.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])\n        };\n        this.emit(\"debug\", {\n          action: \"sendCcipReadCall\",\n          transaction: tx\n        });\n        try {\n          const result = await this.#call(tx, blockTag, attempt + 1);\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadCallResult\",\n            transaction: Object.assign({}, tx),\n            result\n          });\n          return result;\n        } catch (error) {\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadCallError\",\n            transaction: Object.assign({}, tx),\n            error\n          });\n          throw error;\n        }\n      }\n      throw error;\n    }\n  }\n  async #checkNetwork(promise) {\n    const {\n      value\n    } = await (0, index_js_6.resolveProperties)({\n      network: this.getNetwork(),\n      value: promise\n    });\n    return value;\n  }\n  async call(_tx) {\n    const {\n      tx,\n      blockTag\n    } = await (0, index_js_6.resolveProperties)({\n      tx: this._getTransactionRequest(_tx),\n      blockTag: this._getBlockTag(_tx.blockTag)\n    });\n    return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n  }\n  // Account\n  async #getAccountValue(request, _address, _blockTag) {\n    let address = this._getAddress(_address);\n    let blockTag = this._getBlockTag(_blockTag);\n    if (typeof address !== \"string\" || typeof blockTag !== \"string\") {\n      [address, blockTag] = await Promise.all([address, blockTag]);\n    }\n    return await this.#checkNetwork(this.#perform(Object.assign(request, {\n      address,\n      blockTag\n    })));\n  }\n  async getBalance(address, blockTag) {\n    return (0, index_js_6.getBigInt)(await this.#getAccountValue({\n      method: \"getBalance\"\n    }, address, blockTag), \"%response\");\n  }\n  async getTransactionCount(address, blockTag) {\n    return (0, index_js_6.getNumber)(await this.#getAccountValue({\n      method: \"getTransactionCount\"\n    }, address, blockTag), \"%response\");\n  }\n  async getCode(address, blockTag) {\n    return (0, index_js_6.hexlify)(await this.#getAccountValue({\n      method: \"getCode\"\n    }, address, blockTag));\n  }\n  async getStorage(address, _position, blockTag) {\n    const position = (0, index_js_6.getBigInt)(_position, \"position\");\n    return (0, index_js_6.hexlify)(await this.#getAccountValue({\n      method: \"getStorage\",\n      position\n    }, address, blockTag));\n  }\n  // Write\n  async broadcastTransaction(signedTx) {\n    const {\n      blockNumber,\n      hash,\n      network\n    } = await (0, index_js_6.resolveProperties)({\n      blockNumber: this.getBlockNumber(),\n      hash: this._perform({\n        method: \"broadcastTransaction\",\n        signedTransaction: signedTx\n      }),\n      network: this.getNetwork()\n    });\n    const tx = index_js_5.Transaction.from(signedTx);\n    if (tx.hash !== hash) {\n      throw new Error(\"@TODO: the returned hash did not match\");\n    }\n    return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\n  }\n  async #getBlock(block, includeTransactions) {\n    // @TODO: Add CustomBlockPlugin check\n    if ((0, index_js_6.isHexString)(block, 32)) {\n      return await this.#perform({\n        method: \"getBlock\",\n        blockHash: block,\n        includeTransactions\n      });\n    }\n    let blockTag = this._getBlockTag(block);\n    if (typeof blockTag !== \"string\") {\n      blockTag = await blockTag;\n    }\n    return await this.#perform({\n      method: \"getBlock\",\n      blockTag,\n      includeTransactions\n    });\n  }\n  // Queries\n  async getBlock(block, prefetchTxs) {\n    const {\n      network,\n      params\n    } = await (0, index_js_6.resolveProperties)({\n      network: this.getNetwork(),\n      params: this.#getBlock(block, !!prefetchTxs)\n    });\n    if (params == null) {\n      return null;\n    }\n    return this._wrapBlock(params, network);\n  }\n  async getTransaction(hash) {\n    const {\n      network,\n      params\n    } = await (0, index_js_6.resolveProperties)({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getTransaction\",\n        hash\n      })\n    });\n    if (params == null) {\n      return null;\n    }\n    return this._wrapTransactionResponse(params, network);\n  }\n  async getTransactionReceipt(hash) {\n    const {\n      network,\n      params\n    } = await (0, index_js_6.resolveProperties)({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getTransactionReceipt\",\n        hash\n      })\n    });\n    if (params == null) {\n      return null;\n    }\n    // Some backends did not backfill the effectiveGasPrice into old transactions\n    // in the receipt, so we look it up manually and inject it.\n    if (params.gasPrice == null && params.effectiveGasPrice == null) {\n      const tx = await this.#perform({\n        method: \"getTransaction\",\n        hash\n      });\n      if (tx == null) {\n        throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n      }\n      params.effectiveGasPrice = tx.gasPrice;\n    }\n    return this._wrapTransactionReceipt(params, network);\n  }\n  async getTransactionResult(hash) {\n    const {\n      result\n    } = await (0, index_js_6.resolveProperties)({\n      network: this.getNetwork(),\n      result: this.#perform({\n        method: \"getTransactionResult\",\n        hash\n      })\n    });\n    if (result == null) {\n      return null;\n    }\n    return (0, index_js_6.hexlify)(result);\n  }\n  // Bloom-filter Queries\n  async getLogs(_filter) {\n    let filter = this._getFilter(_filter);\n    if (isPromise(filter)) {\n      filter = await filter;\n    }\n    const {\n      network,\n      params\n    } = await (0, index_js_6.resolveProperties)({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getLogs\",\n        filter\n      })\n    });\n    return params.map(p => this._wrapLog(p, network));\n  }\n  // ENS\n  _getProvider(chainId) {\n    (0, index_js_6.assert)(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"_getProvider()\"\n    });\n  }\n  async getResolver(name) {\n    return await ens_resolver_js_1.EnsResolver.fromName(this, name);\n  }\n  async getAvatar(name) {\n    const resolver = await this.getResolver(name);\n    if (resolver) {\n      return await resolver.getAvatar();\n    }\n    return null;\n  }\n  async resolveName(name) {\n    const resolver = await this.getResolver(name);\n    if (resolver) {\n      return await resolver.getAddress();\n    }\n    return null;\n  }\n  async lookupAddress(address) {\n    address = (0, index_js_1.getAddress)(address);\n    const node = (0, index_js_4.namehash)(address.substring(2).toLowerCase() + \".addr.reverse\");\n    try {\n      const ensAddr = await ens_resolver_js_1.EnsResolver.getEnsAddress(this);\n      const ensContract = new index_js_3.Contract(ensAddr, [\"function resolver(bytes32) view returns (address)\"], this);\n      const resolver = await ensContract.resolver(node);\n      if (resolver == null || resolver === index_js_2.ZeroHash) {\n        return null;\n      }\n      const resolverContract = new index_js_3.Contract(resolver, [\"function name(bytes32) view returns (string)\"], this);\n      const name = await resolverContract.name(node);\n      // Failed forward resolution\n      const check = await this.resolveName(name);\n      if (check !== address) {\n        return null;\n      }\n      return name;\n    } catch (error) {\n      // No data was returned from the resolver\n      if ((0, index_js_6.isError)(error, \"BAD_DATA\") && error.value === \"0x\") {\n        return null;\n      }\n      // Something reerted\n      if ((0, index_js_6.isError)(error, \"CALL_EXCEPTION\")) {\n        return null;\n      }\n      throw error;\n    }\n    return null;\n  }\n  async waitForTransaction(hash, _confirms, timeout) {\n    const confirms = _confirms != null ? _confirms : 1;\n    if (confirms === 0) {\n      return this.getTransactionReceipt(hash);\n    }\n    return new Promise(async (resolve, reject) => {\n      let timer = null;\n      const listener = async blockNumber => {\n        try {\n          const receipt = await this.getTransactionReceipt(hash);\n          if (receipt != null) {\n            if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n              resolve(receipt);\n              //this.off(\"block\", listener);\n              if (timer) {\n                clearTimeout(timer);\n                timer = null;\n              }\n              return;\n            }\n          }\n        } catch (error) {\n          console.log(\"EEE\", error);\n        }\n        this.once(\"block\", listener);\n      };\n      if (timeout != null) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n          timer = null;\n          this.off(\"block\", listener);\n          reject((0, index_js_6.makeError)(\"timeout\", \"TIMEOUT\", {\n            reason: \"timeout\"\n          }));\n        }, timeout);\n      }\n      listener(await this.getBlockNumber());\n    });\n  }\n  async waitForBlock(blockTag) {\n    (0, index_js_6.assert)(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n      operation: \"waitForBlock\"\n    });\n  }\n  _clearTimeout(timerId) {\n    const timer = this.#timers.get(timerId);\n    if (!timer) {\n      return;\n    }\n    if (timer.timer) {\n      clearTimeout(timer.timer);\n    }\n    this.#timers.delete(timerId);\n  }\n  _setTimeout(_func, timeout) {\n    if (timeout == null) {\n      timeout = 0;\n    }\n    const timerId = this.#nextTimer++;\n    const func = () => {\n      this.#timers.delete(timerId);\n      _func();\n    };\n    if (this.paused) {\n      this.#timers.set(timerId, {\n        timer: null,\n        func,\n        time: timeout\n      });\n    } else {\n      const timer = setTimeout(func, timeout);\n      this.#timers.set(timerId, {\n        timer,\n        func,\n        time: getTime()\n      });\n    }\n    return timerId;\n  }\n  _forEachSubscriber(func) {\n    for (const sub of this.#subs.values()) {\n      func(sub.subscriber);\n    }\n  }\n  // Event API; sub-classes should override this; any supported\n  // event filter will have been munged into an EventFilter\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"debug\":\n      case \"network\":\n        return new UnmanagedSubscriber(sub.type);\n      case \"block\":\n        return new subscriber_polling_js_1.PollingBlockSubscriber(this);\n      case \"event\":\n        return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);\n      case \"transaction\":\n        return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);\n      case \"orphan\":\n        return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);\n    }\n    throw new Error(`unsupported event: ${sub.type}`);\n  }\n  _recoverSubscriber(oldSub, newSub) {\n    for (const sub of this.#subs.values()) {\n      if (sub.subscriber === oldSub) {\n        if (sub.started) {\n          sub.subscriber.stop();\n        }\n        sub.subscriber = newSub;\n        if (sub.started) {\n          newSub.start();\n        }\n        if (this.#pausedState != null) {\n          newSub.pause(this.#pausedState);\n        }\n        break;\n      }\n    }\n  }\n  async #hasSub(event, emitArgs) {\n    let sub = await getSubscription(event, this);\n    // This is a log that is removing an existing log; we actually want\n    // to emit an orphan event for the removed log\n    if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n      sub = await getSubscription({\n        orphan: \"drop-log\",\n        log: emitArgs[0]\n      }, this);\n    }\n    return this.#subs.get(sub.tag) || null;\n  }\n  async #getSub(event) {\n    const subscription = await getSubscription(event, this);\n    // Prevent tampering with our tag in any subclass' _getSubscriber\n    const tag = subscription.tag;\n    let sub = this.#subs.get(tag);\n    if (!sub) {\n      const subscriber = this._getSubscriber(subscription);\n      const addressableMap = new WeakMap();\n      const nameMap = new Map();\n      sub = {\n        subscriber,\n        tag,\n        addressableMap,\n        nameMap,\n        started: false,\n        listeners: []\n      };\n      this.#subs.set(tag, sub);\n    }\n    return sub;\n  }\n  async on(event, listener) {\n    const sub = await this.#getSub(event);\n    sub.listeners.push({\n      listener,\n      once: false\n    });\n    if (!sub.started) {\n      sub.subscriber.start();\n      sub.started = true;\n      if (this.#pausedState != null) {\n        sub.subscriber.pause(this.#pausedState);\n      }\n    }\n    return this;\n  }\n  async once(event, listener) {\n    const sub = await this.#getSub(event);\n    sub.listeners.push({\n      listener,\n      once: true\n    });\n    if (!sub.started) {\n      sub.subscriber.start();\n      sub.started = true;\n      if (this.#pausedState != null) {\n        sub.subscriber.pause(this.#pausedState);\n      }\n    }\n    return this;\n  }\n  async emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    const sub = await this.#hasSub(event, args);\n    // If there is not subscription or if a recent emit removed\n    // the last of them (which also deleted the sub) do nothing\n    if (!sub || sub.listeners.length === 0) {\n      return false;\n    }\n    ;\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(_ref => {\n      let {\n        listener,\n        once\n      } = _ref;\n      const payload = new index_js_6.EventPayload(this, once ? null : listener, event);\n      try {\n        listener.call(this, ...args, payload);\n      } catch (error) {}\n      return !once;\n    });\n    if (sub.listeners.length === 0) {\n      if (sub.started) {\n        sub.subscriber.stop();\n      }\n      this.#subs.delete(sub.tag);\n    }\n    return count > 0;\n  }\n  async listenerCount(event) {\n    if (event) {\n      const sub = await this.#hasSub(event);\n      if (!sub) {\n        return 0;\n      }\n      return sub.listeners.length;\n    }\n    let total = 0;\n    for (const {\n      listeners\n    } of this.#subs.values()) {\n      total += listeners.length;\n    }\n    return total;\n  }\n  async listeners(event) {\n    if (event) {\n      const sub = await this.#hasSub(event);\n      if (!sub) {\n        return [];\n      }\n      return sub.listeners.map(_ref2 => {\n        let {\n          listener\n        } = _ref2;\n        return listener;\n      });\n    }\n    let result = [];\n    for (const {\n      listeners\n    } of this.#subs.values()) {\n      result = result.concat(listeners.map(_ref3 => {\n        let {\n          listener\n        } = _ref3;\n        return listener;\n      }));\n    }\n    return result;\n  }\n  async off(event, listener) {\n    const sub = await this.#hasSub(event);\n    if (!sub) {\n      return this;\n    }\n    if (listener) {\n      const index = sub.listeners.map(_ref4 => {\n        let {\n          listener\n        } = _ref4;\n        return listener;\n      }).indexOf(listener);\n      if (index >= 0) {\n        sub.listeners.splice(index, 1);\n      }\n    }\n    if (!listener || sub.listeners.length === 0) {\n      if (sub.started) {\n        sub.subscriber.stop();\n      }\n      this.#subs.delete(sub.tag);\n    }\n    return this;\n  }\n  async removeAllListeners(event) {\n    if (event) {\n      const {\n        tag,\n        started,\n        subscriber\n      } = await this.#getSub(event);\n      if (started) {\n        subscriber.stop();\n      }\n      this.#subs.delete(tag);\n    } else {\n      for (const [tag, {\n        started,\n        subscriber\n      }] of this.#subs) {\n        if (started) {\n          subscriber.stop();\n        }\n        this.#subs.delete(tag);\n      }\n    }\n    return this;\n  }\n  // Alias for \"on\"\n  async addListener(event, listener) {\n    return await this.on(event, listener);\n  }\n  // Alias for \"off\"\n  async removeListener(event, listener) {\n    return this.off(event, listener);\n  }\n  // Sub-classes should override this to shutdown any sockets, etc.\n  // but MUST call this super.shutdown.\n  destroy() {\n    // Stop all listeners\n    this.removeAllListeners();\n    // Shut down all tiemrs\n    for (const timerId of this.#timers.keys()) {\n      this._clearTimeout(timerId);\n    }\n  }\n  get paused() {\n    return this.#pausedState != null;\n  }\n  set paused(pause) {\n    if (!!pause === this.paused) {\n      return;\n    }\n    if (this.paused) {\n      this.resume();\n    } else {\n      this.pause(false);\n    }\n  }\n  pause(dropWhilePaused) {\n    this.#lastBlockNumber = -1;\n    if (this.#pausedState != null) {\n      if (this.#pausedState == !!dropWhilePaused) {\n        return;\n      }\n      (0, index_js_6.assert)(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"pause\"\n      });\n    }\n    this._forEachSubscriber(s => s.pause(dropWhilePaused));\n    this.#pausedState = !!dropWhilePaused;\n    for (const timer of this.#timers.values()) {\n      // Clear the timer\n      if (timer.timer) {\n        clearTimeout(timer.timer);\n      }\n      // Remaining time needed for when we become unpaused\n      timer.time = getTime() - timer.time;\n    }\n  }\n  resume() {\n    if (this.#pausedState == null) {\n      return;\n    }\n    this._forEachSubscriber(s => s.resume());\n    this.#pausedState = null;\n    for (const timer of this.#timers.values()) {\n      // Remaining time when we were paused\n      let timeout = timer.time;\n      if (timeout < 0) {\n        timeout = 0;\n      }\n      // Start time (in cause paused, so we con compute remaininf time)\n      timer.time = getTime();\n      // Start the timer\n      setTimeout(timer.func, timeout);\n    }\n  }\n}\nexports.AbstractProvider = AbstractProvider;\nfunction _parseString(result, start) {\n  try {\n    const bytes = _parseBytes(result, start);\n    if (bytes) {\n      return (0, index_js_6.toUtf8String)(bytes);\n    }\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  try {\n    const offset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));\n    const length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset, offset + 32));\n    return (0, index_js_6.dataSlice)(result, offset + 32, offset + 32 + length);\n  } catch (error) {}\n  return null;\n}\nfunction numPad(value) {\n  const result = (0, index_js_6.toBeArray)(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\nconst empty = new Uint8Array([]);\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (let i = 0; i < datas.length; i++) {\n    result.push(empty);\n    byteCount += 32;\n  }\n  for (let i = 0; i < datas.length; i++) {\n    const data = (0, index_js_6.getBytes)(datas[i]);\n    // Update the bytes offset\n    result[i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return (0, index_js_6.concat)(result);\n}\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nfunction parseOffchainLookup(data) {\n  const result = {\n    sender: \"\",\n    urls: [],\n    calldata: \"\",\n    selector: \"\",\n    extraData: \"\",\n    errorArgs: []\n  };\n  (0, index_js_6.assert)((0, index_js_6.dataLength)(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n    reason: \"insufficient OffchainLookup data\"\n  });\n  const sender = (0, index_js_6.dataSlice)(data, 0, 32);\n  (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n    reason: \"corrupt OffchainLookup sender\"\n  });\n  result.sender = (0, index_js_6.dataSlice)(sender, 12);\n  // Read the URLs from the response\n  try {\n    const urls = [];\n    const urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, 32, 64));\n    const urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, urlsOffset, urlsOffset + 32));\n    const urlsData = (0, index_js_6.dataSlice)(data, urlsOffset + 32);\n    for (let u = 0; u < urlsLength; u++) {\n      const url = _parseString(urlsData, u * 32);\n      if (url == null) {\n        throw new Error(\"abort\");\n      }\n      urls.push(url);\n    }\n    result.urls = urls;\n  } catch (error) {\n    (0, index_js_6.assert)(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup urls\"\n    });\n  }\n  // Get the CCIP calldata to forward\n  try {\n    const calldata = _parseBytes(data, 64);\n    if (calldata == null) {\n      throw new Error(\"abort\");\n    }\n    result.calldata = calldata;\n  } catch (error) {\n    (0, index_js_6.assert)(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup calldata\"\n    });\n  }\n  // Get the callbackSelector (bytes4)\n  (0, index_js_6.assert)((0, index_js_6.dataSlice)(data, 100, 128) === (0, index_js_6.dataSlice)(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n    reason: \"corrupt OffchainLookup callbaackSelector\"\n  });\n  result.selector = (0, index_js_6.dataSlice)(data, 96, 100);\n  // Get the extra data to send back to the contract as context\n  try {\n    const extraData = _parseBytes(data, 128);\n    if (extraData == null) {\n      throw new Error(\"abort\");\n    }\n    result.extraData = extraData;\n  } catch (error) {\n    (0, index_js_6.assert)(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup extraData\"\n    });\n  }\n  result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map(k => result[k]);\n  return result;\n}","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","index_js_4","index_js_5","index_js_6","ens_resolver_js_1","format_js_1","network_js_1","provider_js_1","subscriber_polling_js_1","BN_2","BigInt","MAX_CCIP_REDIRECTS","isPromise","value","then","getTag","prefix","JSON","stringify","k","v","toString","toLowerCase","Array","isArray","keys","Object","sort","reduce","accum","key","UnmanagedSubscriber","name","constructor","defineProperties","start","stop","pause","dropWhilePaused","resume","exports","copy","parse","concisify","items","from","Set","values","getSubscription","_event","provider","Error","topics","type","tag","isHexString","hash","orphan","event","filter","address","map","t","addresses","promises","addAddress","addr","push","resolveAddress","forEach","length","Promise","all","a","assertArgument","getTime","Date","AbstractProvider","subs","plugins","pausedState","networkPromise","anyNetwork","performCache","lastBlockNumber","nextTimer","timers","disableCcipRead","_network","network","Network","resolve","setTimeout","emit","Map","attachPlugin","plugin","get","set","connect","getPlugin","perform","#perform","req","method","_perform","delete","ccipReadFetch","tx","calldata","urls","to","sender","data","errorMessages","i","url","href","replace","request","FetchRequest","indexOf","body","action","index","errorMessage","resp","send","result","bodyJson","message","error","assert","statusCode","reason","transaction","info","m","join","_wrapBlock","Block","formatBlock","_wrapLog","Log","formatLog","_wrapTransactionReceipt","TransactionReceipt","formatTransactionReceipt","_wrapTransactionResponse","TransactionResponse","formatTransactionResponse","_detectNetwork","operation","getBlockNumber","blockNumber","getNumber","_getAddress","_getBlockTag","blockTag","toQuantity","b","_getFilter","blockHash","undefined","_address","fromBlock","toBlock","_getTransactionRequest","_request","copyRequest","getNetwork","detectNetwork","clone","expected","actual","chainId","getFeeData","block","gasPrice","resolveProperties","getBlock","getBigInt","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","FeeData","estimateGas","_tx","call","#call","attempt","assign","enableCcipRead","hexlify","isCallException","dataSlice","txSender","ccipArgs","parseOffchainLookup","invocation","revert","signature","args","errorArgs","ccipResult","concat","selector","encodeBytes","extraData","checkNetwork","#checkNetwork","promise","getAccountValue","#getAccountValue","_blockTag","getBalance","getTransactionCount","getCode","getStorage","_position","position","broadcastTransaction","signedTx","signedTransaction","Transaction","replaceableTransaction","#getBlock","includeTransactions","prefetchTxs","params","getTransaction","getTransactionReceipt","effectiveGasPrice","getTransactionResult","getLogs","_filter","p","_getProvider","getResolver","EnsResolver","fromName","getAvatar","resolver","resolveName","getAddress","lookupAddress","node","namehash","substring","ensAddr","getEnsAddress","ensContract","Contract","ZeroHash","resolverContract","check","isError","waitForTransaction","_confirms","timeout","confirms","reject","timer","listener","receipt","clearTimeout","console","log","once","off","makeError","waitForBlock","_clearTimeout","timerId","_setTimeout","_func","func","paused","time","_forEachSubscriber","sub","subscriber","_getSubscriber","PollingBlockSubscriber","PollingEventSubscriber","PollingTransactionSubscriber","PollingOrphanSubscriber","_recoverSubscriber","oldSub","newSub","started","hasSub","#hasSub","emitArgs","removed","getSub","#getSub","subscription","addressableMap","WeakMap","nameMap","listeners","on","_len","arguments","_key","count","_ref","payload","EventPayload","listenerCount","total","_ref2","_ref3","_ref4","splice","removeAllListeners","addListener","removeListener","destroy","s","_parseString","bytes","_parseBytes","toUtf8String","offset","numPad","toBeArray","padded","Uint8Array","bytesPad","Math","ceil","empty","datas","byteCount","getBytes","zeros","dataLength","urlsOffset","urlsLength","urlsData","u","split"],"sources":["/Users/oguzhansenol/Developer/Repositories/lottery-project-interface/node_modules/ethers/src.ts/providers/abstract-provider.ts"],"sourcesContent":["/**\n *  About Subclassing the Provider...\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\n\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\n\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { ZeroHash } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { namehash } from \"../hash/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    concat, dataLength, dataSlice, hexlify, isHexString,\n    getBigInt, getBytes, getNumber,\n    isCallException, isError, makeError, assert, assertArgument,\n    FetchRequest,\n    toBeArray, toQuantity,\n    defineProperties, EventPayload, resolveProperties,\n    toUtf8String\n} from \"../utils/index.js\";\n\nimport { EnsResolver } from \"./ens-resolver.js\";\nimport {\n    formatBlock, formatLog, formatTransactionReceipt, formatTransactionResponse\n} from \"./format.js\";\nimport { Network } from \"./network.js\";\nimport { copyRequest, Block, FeeData, Log, TransactionReceipt, TransactionResponse } from \"./provider.js\";\nimport {\n    PollingBlockSubscriber, PollingEventSubscriber, PollingOrphanSubscriber, PollingTransactionSubscriber\n} from \"./subscriber-polling.js\";\n\nimport type { Addressable, AddressLike } from \"../address/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\nimport type { Listener } from \"../utils/index.js\";\n\nimport type { Networkish } from \"./network.js\";\n//import type { MaxPriorityFeePlugin } from \"./plugins-network.js\";\nimport type {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\nimport type {\n    BlockTag, EventFilter, Filter, FilterByBlockHash, OrphanFilter,\n    PreparedTransactionRequest, Provider, ProviderEvent,\n    TransactionRequest\n} from \"./provider.js\";\n\ntype Timer = ReturnType<typeof setTimeout>;\n\n\n// Constants\nconst BN_2 = BigInt(2);\n\nconst MAX_CCIP_REDIRECTS = 10;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\nfunction getTag(prefix: string, value: any): string {\n    return prefix + \":\" + JSON.stringify(value, (k, v) => {\n        if (v == null) { return \"null\"; }\n        if (typeof(v) === \"bigint\") { return `bigint:${ v.toString() }`}\n        if (typeof(v) === \"string\") { return v.toLowerCase(); }\n\n        // Sort object keys\n        if (typeof(v) === \"object\" && !Array.isArray(v)) {\n            const keys = Object.keys(v);\n            keys.sort();\n            return keys.reduce((accum, key) => {\n                accum[key] = v[key];\n                return accum;\n            }, <any>{ });\n        }\n\n        return v;\n    });\n}\n\nexport type DebugEventAbstractProvider = {\n    action: \"sendCcipReadFetchRequest\",\n    request: FetchRequest\n    index: number\n    urls: Array<string>\n} | {\n    action: \"receiveCcipReadFetchResult\",\n    request: FetchRequest,\n    result: any\n} | {\n    action: \"receiveCcipReadFetchError\",\n    request: FetchRequest,\n    result: any\n} | {\n    action: \"sendCcipReadCall\",\n    transaction: { to: string, data: string }\n} | {\n    action: \"receiveCcipReadCallResult\",\n    transaction: { to: string, data: string }\n    result: string\n} | {\n    action: \"receiveCcipReadCallError\",\n    transaction: { to: string, data: string }\n    error: Error\n};\n\n\n// Only sub-classes overriding the _getSubscription method will care about this\nexport type Subscription = {\n    type: \"block\" | \"close\" | \"debug\" | \"network\" | \"pending\",\n    tag: string\n} | {\n    type: \"transaction\",\n    tag: string,\n    hash: string\n} | {\n    type: \"event\",\n    tag: string,\n    filter: EventFilter\n} | {\n    type: \"orphan\",\n    tag: string,\n    filter: OrphanFilter\n};\n\nexport interface Subscriber {\n    start(): void;\n    stop(): void;\n\n    pause(dropWhilePaused?: boolean): void;\n    resume(): void;\n\n    // Subscribers which use polling should implement this to allow\n    // Providers the ability to update underlying polling intervals\n    // If not supported, accessing this property should return undefined\n    pollingInterval?: number;\n}\n\nexport class UnmanagedSubscriber implements Subscriber {\n    name!: string;\n\n    constructor(name: string) { defineProperties<UnmanagedSubscriber>(this, { name }); }\n\n    start(): void { }\n    stop(): void { }\n\n    pause(dropWhilePaused?: boolean): void { }\n    resume(): void { }\n}\n\ntype Sub = {\n    tag: string;\n    nameMap: Map<string, string>\n    addressableMap: WeakMap<Addressable, string>;\n    listeners: Array<{ listener: Listener, once: boolean }>;\n    // @TODO: get rid of this, as it is (and has to be)\n    // tracked in subscriber\n    started: boolean;\n    subscriber: Subscriber;\n};\n\nfunction copy<T = any>(value: T): T {\n    return JSON.parse(JSON.stringify(value));\n}\n\nfunction concisify(items: Array<string>): Array<string> {\n    items = Array.from((new Set(items)).values())\n    items.sort();\n    return items;\n}\n\n\nasync function getSubscription(_event: ProviderEvent, provider: AbstractProvider): Promise<Subscription> {\n    if (_event == null) { throw new Error(\"invalid event\"); }\n\n    // Normalize topic array info an EventFilter\n    if (Array.isArray(_event)) { _event = { topics: _event }; }\n\n    if (typeof(_event) === \"string\") {\n        switch (_event) {\n            case \"block\": case \"pending\": case \"debug\": case \"network\": {\n                return { type: _event, tag: _event };\n            }\n        }\n    }\n\n    if (isHexString(_event, 32)) {\n        const hash = _event.toLowerCase();\n        return { type: \"transaction\", tag: getTag(\"tx\", { hash }), hash };\n    }\n\n    if ((<any>_event).orphan) {\n        const event = <OrphanFilter>_event;\n        // @TODO: Should lowercase and whatnot things here instead of copy...\n        return { type: \"orphan\", tag: getTag(\"orphan\", event), filter: copy(event) };\n    }\n\n    if (((<any>_event).address || (<any>_event).topics)) {\n        const event = <EventFilter>_event;\n\n        const filter: any = {\n            topics: ((event.topics || []).map((t) => {\n                if (t == null) { return null; }\n                if (Array.isArray(t)) {\n                    return concisify(t.map((t) => t.toLowerCase()));\n                }\n                return t.toLowerCase();\n            }))\n        };\n\n        if (event.address) {\n            const addresses: Array<string> = [ ];\n            const promises: Array<Promise<void>> = [ ];\n\n            const addAddress = (addr: AddressLike) => {\n                if (isHexString(addr)) {\n                    addresses.push(addr);\n                } else {\n                    promises.push((async () => {\n                        addresses.push(await resolveAddress(addr, provider));\n                    })());\n                }\n            }\n\n            if (Array.isArray(event.address)) {\n                event.address.forEach(addAddress);\n            } else {\n                addAddress(event.address);\n            }\n            if (promises.length) { await Promise.all(promises); }\n            filter.address = concisify(addresses.map((a) => a.toLowerCase()));\n        }\n\n        return { filter, tag: getTag(\"event\", filter), type: \"event\" };\n    }\n\n    assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nexport interface AbstractProviderPlugin {\n    readonly name: string;\n    connect(provider: AbstractProvider): AbstractProviderPlugin;\n}\n\nexport type PerformActionFilter = {\n    address?: string | Array<string>;\n    topics?: Array<null | string | Array<string>>;\n    fromBlock?: BlockTag;\n    toBlock?: BlockTag;\n} | {\n    address?: string | Array<string>;\n    topics?: Array<null | string | Array<string>>;\n    blockHash?: string;\n};\n\nexport interface PerformActionTransaction extends PreparedTransactionRequest {\n    to?: string;\n    from?: string;\n}\n\nexport type PerformActionRequest = {\n    method: \"broadcastTransaction\",\n    signedTransaction: string\n} | {\n    method: \"call\",\n    transaction: PerformActionTransaction, blockTag: BlockTag\n} | {\n    method: \"chainId\"\n} | {\n    method: \"estimateGas\",\n    transaction: PerformActionTransaction\n} | {\n    method: \"getBalance\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getBlock\",\n    blockTag: BlockTag, includeTransactions: boolean\n} | {\n    method: \"getBlock\",\n    blockHash: string, includeTransactions: boolean\n} | {\n    method: \"getBlockNumber\"\n} | {\n    method: \"getCode\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getGasPrice\"\n} | {\n    method: \"getLogs\",\n    filter: PerformActionFilter\n} | {\n    method: \"getStorage\",\n    address: string, position: bigint, blockTag: BlockTag\n} | {\n    method: \"getTransaction\",\n    hash: string\n} | {\n    method: \"getTransactionCount\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getTransactionReceipt\",\n    hash: string\n} | {\n    method: \"getTransactionResult\",\n    hash: string\n};\n\ntype _PerformAccountRequest = {\n    method: \"getBalance\" | \"getTransactionCount\" | \"getCode\"\n} | {\n    method: \"getStorage\", position: bigint\n}\n\ntype CcipArgs = {\n    sender: string;\n    urls: Array<string>;\n    calldata: string;\n    selector: string;\n    extraData: string;\n    errorArgs: Array<any>\n};\n\n\nexport class AbstractProvider implements Provider {\n\n    #subs: Map<string, Sub>;\n    #plugins: Map<string, AbstractProviderPlugin>;\n\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\n    #pausedState: null | boolean;\n\n    #networkPromise: null | Promise<Network>;\n    readonly #anyNetwork: boolean;\n\n    #performCache: Map<string, Promise<any>>;\n\n    // The most recent block number if running an event or -1 if no \"block\" event\n    #lastBlockNumber: number;\n\n    #nextTimer: number;\n    #timers: Map<number, { timer: null | Timer, func: () => void, time: number }>;\n\n    #disableCcipRead: boolean;\n\n    // @TODO: This should be a () => Promise<Network> so network can be\n    // done when needed; or rely entirely on _detectNetwork?\n    constructor(_network?: \"any\" | Networkish) {\n\n        if (_network === \"any\") {\n            this.#anyNetwork = true;\n            this.#networkPromise = null;\n        } else if (_network) {\n            const network = Network.from(_network);\n            this.#anyNetwork = false;\n            this.#networkPromise = Promise.resolve(network);\n            setTimeout(() => { this.emit(\"network\", network, null); }, 0);\n        } else {\n            this.#anyNetwork = false;\n            this.#networkPromise = null;\n        }\n\n        this.#lastBlockNumber = -1;\n\n        this.#performCache = new Map();\n\n        this.#subs = new Map();\n        this.#plugins = new Map();\n        this.#pausedState = null;\n\n        this.#nextTimer = 1;\n        this.#timers = new Map();\n\n        this.#disableCcipRead = false;\n    }\n\n    get provider(): this { return this; }\n\n    get plugins(): Array<AbstractProviderPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    attachPlugin(plugin: AbstractProviderPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name,  plugin.connect(this));\n        return this;\n    }\n\n    getPlugin<T extends AbstractProviderPlugin = AbstractProviderPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    get disableCcipRead(): boolean { return this.#disableCcipRead; }\n    set disableCcipRead(value: boolean) { this.#disableCcipRead = !!value; }\n\n    // Shares multiple identical requests made during the same 250ms\n    async #perform<T = any>(req: PerformActionRequest): Promise<T> {\n        // Create a tag\n        const tag = getTag(req.method, req);\n\n        let perform = this.#performCache.get(tag);\n        if (!perform) {\n            perform = this._perform(req);\n            this.#performCache.set(tag, perform);\n\n            setTimeout(() => {\n                if (this.#performCache.get(tag) === perform) {\n                    this.#performCache.delete(tag);\n                }\n            }, 250);\n        }\n\n        return await perform;\n    }\n\n    async ccipReadFetch(tx: PerformActionTransaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n            //    value.status = response.statusCode;\n            //    return value;\n            //});\n            const request = new FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n                request.body = { data, sender };\n            }\n\n            this.emit(\"debug\", { action: \"sendCcipReadFetchRequest\", request, index: i, urls });\n\n            let errorMessage = \"unknown error\";\n\n            const resp = await request.send();\n            try {\n                 const result = resp.bodyJson;\n                 if (result.data) {\n                     this.emit(\"debug\", { action: \"receiveCcipReadFetchResult\", request, result });\n                     return result.data;\n                 }\n                 if (result.message) { errorMessage = result.message; }\n                 this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result });\n            } catch (error) { }\n\n            // 4xx indicates the result is not present; stop\n            assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${ errorMessage }`,\n                \"OFFCHAIN_FAULT\", { reason: \"404_MISSING_RESOURCE\", transaction: tx, info: { url, errorMessage } });\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        assert(false, `error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx, info: { urls, errorMessages }\n        });\n    }\n\n    _wrapBlock(value: BlockParams, network: Network): Block {\n        return new Block(formatBlock(value), this);\n    }\n\n    _wrapLog(value: LogParams, network: Network): Log {\n        return new Log(formatLog(value), this);\n    }\n\n    _wrapTransactionReceipt(value: TransactionReceiptParams, network: Network): TransactionReceipt {\n        return new TransactionReceipt(formatTransactionReceipt(value), this);\n    }\n\n    _wrapTransactionResponse(tx: TransactionResponseParams, network: Network): TransactionResponse {\n        return new TransactionResponse(formatTransactionResponse(tx), this);\n    }\n\n    _detectNetwork(): Promise<Network> {\n        assert(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n        });\n    }\n\n    // Sub-classes should override this and handle PerformActionRequest requests, calling\n    // the super for any unhandled actions.\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        assert(false, `unsupported method: ${ req.method }`, \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n        });\n    }\n\n    // State\n    async getBlockNumber(): Promise<number> {\n        const blockNumber = getNumber(await this.#perform({ method: \"getBlockNumber\" }), \"%response\");\n        if (this.#lastBlockNumber >= 0) { this.#lastBlockNumber = blockNumber; }\n        return blockNumber;\n    }\n\n    _getAddress(address: AddressLike): string | Promise<string> {\n        return resolveAddress(address, this);\n    }\n\n    _getBlockTag(blockTag?: BlockTag): string | Promise<string> {\n        if (blockTag == null) { return \"latest\"; }\n\n        switch (blockTag) {\n            case \"earliest\":\n                return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n\n        if (isHexString(blockTag)) {\n            if (isHexString(blockTag, 32)) { return blockTag; }\n            return toQuantity(blockTag);\n        }\n\n        if (typeof(blockTag) === \"bigint\") {\n            blockTag = getNumber(blockTag, \"blockTag\");\n        }\n\n        if (typeof(blockTag) === \"number\") {\n            if (blockTag >= 0) { return toQuantity(blockTag); }\n            if (this.#lastBlockNumber >= 0) { return toQuantity(this.#lastBlockNumber + blockTag); }\n            return this.getBlockNumber().then((b) => toQuantity(b + <number>blockTag));\n        }\n\n        assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n\n    _getFilter(filter: Filter | FilterByBlockHash): PerformActionFilter | Promise<PerformActionFilter> {\n\n        // Create a canonical representation of the topics\n        const topics = (filter.topics || [ ]).map((t) => {\n            if (t == null) { return null; }\n            if (Array.isArray(t)) {\n                return concisify(t.map((t) => t.toLowerCase()));\n            }\n            return t.toLowerCase();\n        });\n\n        const blockHash = (\"blockHash\" in filter) ? filter.blockHash: undefined;\n\n        const resolve = (_address: Array<string>, fromBlock?: string, toBlock?: string) => {\n            let address: undefined | string | Array<string> = undefined;\n            switch (_address.length) {\n                case 0: break;\n                case 1:\n                    address = _address[0];\n                    break;\n                default:\n                    _address.sort();\n                    address = _address;\n            }\n\n            if (blockHash) {\n                if (fromBlock != null || toBlock != null) {\n                    throw new Error(\"invalid filter\");\n                }\n            }\n\n            const filter = <any>{ };\n            if (address) { filter.address = address; }\n            if (topics.length) { filter.topics = topics; }\n            if (fromBlock) { filter.fromBlock = fromBlock; }\n            if (toBlock) { filter.toBlock = toBlock; }\n            if (blockHash) { filter.blockHash = blockHash; }\n\n            return filter;\n        };\n\n        // Addresses could be async (ENS names or Addressables)\n        let address: Array<string | Promise<string>> = [ ];\n        if (filter.address) {\n            if (Array.isArray(filter.address)) {\n                for (const addr of filter.address) { address.push(this._getAddress(addr)); }\n            } else {\n                address.push(this._getAddress(filter.address));\n            }\n        }\n\n        let fromBlock: undefined | string | Promise<string> = undefined;\n        if (\"fromBlock\" in filter) { fromBlock = this._getBlockTag(filter.fromBlock); }\n\n        let toBlock: undefined | string | Promise<string> = undefined;\n        if (\"toBlock\" in filter) { toBlock = this._getBlockTag(filter.toBlock); }\n\n        if (address.filter((a) => (typeof(a) !== \"string\")).length ||\n            (fromBlock != null && typeof(fromBlock) !== \"string\") ||\n            (toBlock != null && typeof(toBlock) !== \"string\")) {\n\n            return Promise.all([ Promise.all(address), fromBlock, toBlock ]).then((result) => {\n                return resolve(result[0], result[1], result[2]);\n            });\n        }\n\n        return resolve(<Array<string>>address, fromBlock, toBlock);\n    }\n\n    _getTransactionRequest(_request: TransactionRequest): PerformActionTransaction | Promise<PerformActionTransaction> {\n        const request = <PerformActionTransaction>copyRequest(_request);\n\n        const promises: Array<Promise<void>> = [ ];\n        [ \"to\", \"from\" ].forEach((key) => {\n            if ((<any>request)[key] == null) { return; }\n\n            const addr = resolveAddress((<any>request)[key]);\n            if (isPromise(addr)) {\n                promises.push((async function() { (<any>request)[key] = await addr; })());\n            } else {\n                (<any>request)[key] = addr;\n            }\n        });\n\n        if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n                promises.push((async function() { request.blockTag = await blockTag; })());\n            } else {\n                request.blockTag = blockTag;\n            }\n        }\n\n        if (promises.length) {\n            return (async function() {\n                await Promise.all(promises);\n                return request;\n            })();\n        }\n\n        return request;\n    }\n\n    async getNetwork(): Promise<Network> {\n\n        // No explicit network was set and this is our first time\n        if (this.#networkPromise == null) {\n\n            // Detect the current network (shared with all calls)\n            const detectNetwork = this._detectNetwork().then((network) => {\n                this.emit(\"network\", network, null);\n                return network;\n            }, (error) => {\n                // Reset the networkPromise on failure, so we will try again\n                if (this.#networkPromise === detectNetwork) {\n                    this.#networkPromise = null;\n                }\n                throw error;\n            });\n\n            this.#networkPromise = detectNetwork;\n            return (await detectNetwork).clone();\n        }\n\n        const networkPromise = this.#networkPromise;\n\n        const [ expected, actual ] = await Promise.all([\n            networkPromise,          // Possibly an explicit Network\n            this._detectNetwork()    // The actual connected network\n        ]);\n\n        if (expected.chainId !== actual.chainId) {\n            if (this.#anyNetwork) {\n                // The \"any\" network can change, so notify listeners\n                this.emit(\"network\", actual, expected);\n\n                // Update the network if something else hasn't already changed it\n                if (this.#networkPromise === networkPromise) {\n                    this.#networkPromise = Promise.resolve(actual);\n                }\n            } else {\n                // Otherwise, we do not allow changes to the underlying network\n                assert(false, `network changed: ${ expected.chainId } => ${ actual.chainId } `, \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                });\n            }\n        }\n\n        return expected.clone();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        const { block, gasPrice } = await resolveProperties({\n            block: this.getBlock(\"latest\"),\n            gasPrice: ((async () => {\n                try {\n                    const gasPrice = await this.#perform({ method: \"getGasPrice\" });\n                    return getBigInt(gasPrice, \"%response\");\n                } catch (error) { }\n                return null\n            })())\n        });\n\n        let maxFeePerGas = null, maxPriorityFeePerGas = null;\n\n        if (block && block.baseFeePerGas) {\n            // We may want to compute this more accurately in the future,\n            // using the formula \"check if the base fee is correct\".\n            // See: https://eips.ethereum.org/EIPS/eip-1559\n            maxPriorityFeePerGas = BigInt(\"1000000000\");\n\n            // Allow a network to override their maximum priority fee per gas\n            //const priorityFeePlugin = (await this.getNetwork()).getPlugin<MaxPriorityFeePlugin>(\"org.ethers.plugins.max-priority-fee\");\n            //if (priorityFeePlugin) {\n            //    maxPriorityFeePerGas = await priorityFeePlugin.getPriorityFee(this);\n            //}\n            maxFeePerGas = (block.baseFeePerGas * BN_2) + maxPriorityFeePerGas;\n        }\n\n        return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n    }\n\n\n    async estimateGas(_tx: TransactionRequest): Promise<bigint> {\n        let tx = this._getTransactionRequest(_tx);\n        if (isPromise(tx)) { tx = await tx; }\n        return getBigInt(await this.#perform({\n            method: \"estimateGas\", transaction: tx\n        }), \"%response\");\n    }\n\n    async #call(tx: PerformActionTransaction, blockTag: string, attempt: number): Promise<string> {\n        assert (attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n             reason: \"TOO_MANY_REDIRECTS\",\n             transaction: Object.assign({ }, tx, { blockTag, enableCcipRead: true })\n         });\n\n         // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n         const transaction = <PerformActionTransaction>copyRequest(tx);\n\n         try {\n             return hexlify(await this._perform({ method: \"call\", transaction, blockTag }));\n\n         } catch (error) {\n             // CCIP Read OffchainLookup\n             if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n                 const data = error.data;\n\n                 const txSender = await resolveAddress(transaction.to, this);\n\n                 // Parse the CCIP Read Arguments\n                 let ccipArgs: CcipArgs;\n                 try {\n                     ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n                 } catch (error: any) {\n                     assert(false, error.message, \"OFFCHAIN_FAULT\", {\n                         reason: \"BAD_DATA\", transaction, info: { data } });\n                 }\n\n                 // Check the sender of the OffchainLookup matches the transaction\n                 assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(),\n                     \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                         action: \"call\",\n                         data,\n                         reason: \"OffchainLookup\",\n                         transaction: <any>transaction, // @TODO: populate data?\n                         invocation: null,\n                         revert: {\n                             signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                             name: \"OffchainLookup\",\n                             args: ccipArgs.errorArgs\n                         }\n                     });\n\n                 const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n                 assert(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                     reason: \"FETCH_FAILED\", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs } });\n\n                 const tx = {\n                     to: txSender,\n                     data: concat([ ccipArgs.selector, encodeBytes([ ccipResult, ccipArgs.extraData ]) ])\n                 };\n\n                 this.emit(\"debug\", { action: \"sendCcipReadCall\", transaction: tx });\n                 try {\n                     const result = await this.#call(tx, blockTag, attempt + 1);\n                     this.emit(\"debug\", { action: \"receiveCcipReadCallResult\", transaction: Object.assign({ }, tx), result });\n                     return result;\n                 } catch (error) {\n                     this.emit(\"debug\", { action: \"receiveCcipReadCallError\", transaction: Object.assign({ }, tx), error });\n                     throw error;\n                 }\n             }\n\n             throw error;\n         }\n    }\n\n    async #checkNetwork<T>(promise: Promise<T>): Promise<T> {\n        const { value } = await resolveProperties({\n            network: this.getNetwork(),\n            value: promise\n        });\n        return value;\n    }\n\n    async call(_tx: TransactionRequest): Promise<string> {\n        const { tx, blockTag } = await resolveProperties({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n        });\n        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0: -1));\n    }\n\n    // Account\n    async #getAccountValue(request: _PerformAccountRequest, _address: AddressLike, _blockTag?: BlockTag): Promise<any> {\n        let address: string | Promise<string> = this._getAddress(_address);\n        let blockTag: string | Promise<string> = this._getBlockTag(_blockTag);\n\n        if (typeof(address) !== \"string\" || typeof(blockTag) !== \"string\") {\n            [ address, blockTag ] = await Promise.all([ address, blockTag ]);\n        }\n\n        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));\n    }\n\n    async getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint> {\n        return getBigInt(await this.#getAccountValue({ method: \"getBalance\" }, address, blockTag), \"%response\");\n    }\n\n    async getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number> {\n        return getNumber(await this.#getAccountValue({ method: \"getTransactionCount\" }, address, blockTag), \"%response\");\n    }\n\n    async getCode(address: AddressLike, blockTag?: BlockTag): Promise<string> {\n        return hexlify(await this.#getAccountValue({ method: \"getCode\" }, address, blockTag));\n    }\n\n    async getStorage(address: AddressLike, _position: BigNumberish, blockTag?: BlockTag): Promise<string> {\n        const position = getBigInt(_position, \"position\");\n        return hexlify(await this.#getAccountValue({ method: \"getStorage\", position }, address, blockTag));\n    }\n\n    // Write\n    async broadcastTransaction(signedTx: string): Promise<TransactionResponse> {\n        const { blockNumber, hash, network } = await resolveProperties({\n             blockNumber: this.getBlockNumber(),\n             hash: this._perform({\n                 method: \"broadcastTransaction\",\n                 signedTransaction: signedTx\n             }),\n             network: this.getNetwork()\n        });\n\n        const tx = Transaction.from(signedTx);\n        if (tx.hash !== hash) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n        }\n\n        return this._wrapTransactionResponse(<any>tx, network).replaceableTransaction(blockNumber);\n    }\n\n    async #getBlock(block: BlockTag | string, includeTransactions: boolean): Promise<any> {\n        // @TODO: Add CustomBlockPlugin check\n\n        if (isHexString(block, 32)) {\n            return await this.#perform({\n                method: \"getBlock\", blockHash: block, includeTransactions\n            });\n        }\n\n        let blockTag = this._getBlockTag(block);\n        if (typeof(blockTag) !== \"string\") { blockTag = await blockTag; }\n\n        return await this.#perform({\n            method: \"getBlock\", blockTag, includeTransactions\n        });\n    }\n\n    // Queries\n    async getBlock(block: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#getBlock(block, !!prefetchTxs)\n        });\n        if (params == null) { return null; }\n\n        return this._wrapBlock(params, network);\n    }\n\n    async getTransaction(hash: string): Promise<null | TransactionResponse> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransaction\", hash })\n        });\n        if (params == null) { return null; }\n\n        return this._wrapTransactionResponse(params, network);\n    }\n\n    async getTransactionReceipt(hash: string): Promise<null | TransactionReceipt> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransactionReceipt\", hash })\n        });\n        if (params == null) { return null; }\n\n        // Some backends did not backfill the effectiveGasPrice into old transactions\n        // in the receipt, so we look it up manually and inject it.\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await this.#perform({ method: \"getTransaction\", hash });\n            if (tx == null) { throw new Error(\"report this; could not find tx or effectiveGasPrice\"); }\n            params.effectiveGasPrice = tx.gasPrice;\n        }\n\n        return this._wrapTransactionReceipt(params, network);\n    }\n\n    async getTransactionResult(hash: string): Promise<null | string> {\n        const { result } = await resolveProperties({\n            network: this.getNetwork(),\n            result: this.#perform({ method: \"getTransactionResult\", hash })\n        });\n        if (result == null) { return null; }\n        return hexlify(result);\n    }\n\n    // Bloom-filter Queries\n    async getLogs(_filter: Filter | FilterByBlockHash): Promise<Array<Log>> {\n        let filter = this._getFilter(_filter);\n        if (isPromise(filter)) { filter = await filter; }\n\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform<Array<LogParams>>({ method: \"getLogs\", filter })\n        });\n\n        return params.map((p) => this._wrapLog(p, network));\n    }\n\n    // ENS\n    _getProvider(chainId: number): AbstractProvider {\n        assert(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n        });\n    }\n\n    async getResolver(name: string): Promise<null | EnsResolver> {\n        return await EnsResolver.fromName(this, name);\n    }\n\n    async getAvatar(name: string): Promise<null | string> {\n        const resolver = await this.getResolver(name);\n        if (resolver) { return await resolver.getAvatar(); }\n        return null;\n    }\n\n    async resolveName(name: string): Promise<null | string>{\n        const resolver = await this.getResolver(name);\n        if (resolver) { return await resolver.getAddress(); }\n        return null;\n    }\n\n    async lookupAddress(address: string): Promise<null | string> {\n        address = getAddress(address);\n        const node = namehash(address.substring(2).toLowerCase() + \".addr.reverse\");\n\n        try {\n\n            const ensAddr = await EnsResolver.getEnsAddress(this);\n            const ensContract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], this);\n\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === ZeroHash) { return null; }\n\n            const resolverContract = new Contract(resolver, [\n                \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n\n            // Failed forward resolution\n            const check = await this.resolveName(name);\n            if (check !== address) { return null; }\n\n            return name;\n        } catch (error) {\n            // No data was returned from the resolver\n            if (isError(error, \"BAD_DATA\") && error.value === \"0x\") {\n                return null;\n            }\n\n            // Something reerted\n            if (isError(error, \"CALL_EXCEPTION\")) { return null; }\n\n            throw error;\n        }\n\n        return null;\n    }\n\n    async waitForTransaction(hash: string, _confirms?: null | number, timeout?: null | number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms != null) ? _confirms: 1;\n        if (confirms === 0) { return this.getTransactionReceipt(hash); }\n\n        return new Promise(async (resolve, reject) => {\n            let timer: null | Timer = null;\n\n            const listener = (async (blockNumber: number) => {\n                try {\n                    const receipt = await this.getTransactionReceipt(hash);\n                    if (receipt != null) {\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                            resolve(receipt);\n                            //this.off(\"block\", listener);\n                            if (timer) {\n                                clearTimeout(timer);\n                                timer = null;\n                            }\n                            return;\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"EEE\", error);\n                }\n                this.once(\"block\", listener);\n            });\n\n            if (timeout != null) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n                    this.off(\"block\", listener);\n                    reject(makeError(\"timeout\", \"TIMEOUT\", { reason: \"timeout\" }));\n                }, timeout);\n            }\n\n            listener(await this.getBlockNumber());\n        });\n    }\n\n    async waitForBlock(blockTag?: BlockTag): Promise<Block> {\n        assert(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n        });\n    }\n\n    _clearTimeout(timerId: number): void {\n        const timer = this.#timers.get(timerId);\n        if (!timer) { return; }\n        if (timer.timer) { clearTimeout(timer.timer); }\n        this.#timers.delete(timerId);\n    }\n\n    _setTimeout(_func: () => void, timeout?: number): number {\n        if (timeout == null) { timeout = 0; }\n        const timerId = this.#nextTimer++;\n        const func = () => {\n            this.#timers.delete(timerId);\n            _func();\n        };\n\n        if (this.paused) {\n            this.#timers.set(timerId, { timer: null, func, time: timeout });\n        } else {\n            const timer = setTimeout(func, timeout);\n            this.#timers.set(timerId, { timer, func, time: getTime() });\n        }\n\n        return timerId;\n    }\n\n    _forEachSubscriber(func: (s: Subscriber) => void): void {\n        for (const sub of this.#subs.values()) {\n            func(sub.subscriber);\n        }\n    }\n\n    // Event API; sub-classes should override this; any supported\n    // event filter will have been munged into an EventFilter\n    _getSubscriber(sub: Subscription): Subscriber {\n        switch (sub.type) {\n            case \"debug\":\n            case \"network\":\n                return new UnmanagedSubscriber(sub.type);\n            case \"block\":\n                return new PollingBlockSubscriber(this);\n            case \"event\":\n                return new PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n                return new PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n                return new PollingOrphanSubscriber(this, sub.filter);\n        }\n\n        throw new Error(`unsupported event: ${ sub.type }`);\n    }\n\n    _recoverSubscriber(oldSub: Subscriber, newSub: Subscriber): void {\n        for (const sub of this.#subs.values()) {\n            if (sub.subscriber === oldSub) {\n                if (sub.started) { sub.subscriber.stop(); }\n                sub.subscriber = newSub;\n                if (sub.started) { newSub.start(); }\n                if (this.#pausedState != null) { newSub.pause(this.#pausedState); }\n                break;\n            }\n        }\n    }\n\n    async #hasSub(event: ProviderEvent, emitArgs?: Array<any>): Promise<null | Sub> {\n        let sub = await getSubscription(event, this);\n        // This is a log that is removing an existing log; we actually want\n        // to emit an orphan event for the removed log\n        if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n            sub = await getSubscription({ orphan: \"drop-log\", log: emitArgs[0] }, this);\n        }\n        return this.#subs.get(sub.tag) || null;\n    }\n\n    async #getSub(event: ProviderEvent): Promise<Sub> {\n        const subscription = await getSubscription(event, this);\n\n        // Prevent tampering with our tag in any subclass' _getSubscriber\n        const tag = subscription.tag;\n\n        let sub = this.#subs.get(tag);\n        if (!sub) {\n            const subscriber = this._getSubscriber(subscription);\n\n            const addressableMap = new WeakMap();\n            const nameMap = new Map();\n            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [ ] };\n            this.#subs.set(tag, sub);\n        }\n\n        return sub;\n    }\n\n    async on(event: ProviderEvent, listener: Listener): Promise<this> {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: false });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) { sub.subscriber.pause(this.#pausedState); }\n        }\n        return this;\n    }\n\n    async once(event: ProviderEvent, listener: Listener): Promise<this> {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: true });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) { sub.subscriber.pause(this.#pausedState); }\n        }\n        return this;\n    }\n\n    async emit(event: ProviderEvent, ...args: Array<any>): Promise<boolean> {\n        const sub = await this.#hasSub(event, args);\n        // If there is not subscription or if a recent emit removed\n        // the last of them (which also deleted the sub) do nothing\n        if (!sub || sub.listeners.length === 0) { return false; };\n\n        const count = sub.listeners.length;\n        sub.listeners = sub.listeners.filter(({ listener, once }) => {\n            const payload = new EventPayload(this, (once ? null: listener), event);\n            try {\n                listener.call(this, ...args, payload);\n            } catch(error) { }\n            return !once;\n        });\n\n        if (sub.listeners.length === 0) {\n            if (sub.started) { sub.subscriber.stop(); }\n            this.#subs.delete(sub.tag);\n        }\n\n        return (count > 0);\n    }\n\n    async listenerCount(event?: ProviderEvent): Promise<number> {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        let total = 0;\n        for (const { listeners } of this.#subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    async listeners(event?: ProviderEvent): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) { return  [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of this.#subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    async off(event: ProviderEvent, listener?: Listener): Promise<this> {\n        const sub = await this.#hasSub(event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (!listener || sub.listeners.length === 0) {\n            if (sub.started) { sub.subscriber.stop(); }\n            this.#subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    async removeAllListeners(event?: ProviderEvent): Promise<this> {\n        if (event) {\n            const { tag, started, subscriber } = await this.#getSub(event);\n            if (started) { subscriber.stop(); }\n            this.#subs.delete(tag);\n        } else {\n            for (const [ tag, { started, subscriber } ] of this.#subs) {\n                if (started) { subscriber.stop(); }\n                this.#subs.delete(tag);\n            }\n        }\n        return this;\n    }\n\n    // Alias for \"on\"\n    async addListener(event: ProviderEvent, listener: Listener): Promise<this> {\n       return await this.on(event, listener);\n    }\n\n    // Alias for \"off\"\n    async removeListener(event: ProviderEvent, listener: Listener): Promise<this> {\n       return this.off(event, listener);\n    }\n\n    // Sub-classes should override this to shutdown any sockets, etc.\n    // but MUST call this super.shutdown.\n    destroy(): void {\n        // Stop all listeners\n        this.removeAllListeners();\n\n        // Shut down all tiemrs\n        for (const timerId of this.#timers.keys()) {\n            this._clearTimeout(timerId);\n        }\n    }\n\n    get paused(): boolean { return (this.#pausedState != null); }\n    set paused(pause: boolean) {\n        if (!!pause === this.paused) { return; }\n\n        if (this.paused) {\n            this.resume();\n        } else {\n            this.pause(false);\n        }\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        this.#lastBlockNumber = -1;\n\n        if (this.#pausedState != null) {\n            if (this.#pausedState == !!dropWhilePaused) { return; }\n            assert(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"pause\"\n            });\n        }\n\n        this._forEachSubscriber((s) => s.pause(dropWhilePaused));\n        this.#pausedState = !!dropWhilePaused;\n\n        for (const timer of this.#timers.values()) {\n            // Clear the timer\n            if (timer.timer) { clearTimeout(timer.timer); }\n\n            // Remaining time needed for when we become unpaused\n            timer.time = getTime() - timer.time;\n        }\n    }\n\n    resume(): void {\n        if (this.#pausedState == null) { return; }\n\n        this._forEachSubscriber((s) => s.resume());\n        this.#pausedState = null;\n        for (const timer of this.#timers.values()) {\n            // Remaining time when we were paused\n            let timeout = timer.time;\n            if (timeout < 0) { timeout = 0; }\n\n            // Start time (in cause paused, so we con compute remaininf time)\n            timer.time = getTime();\n\n            // Start the timer\n            setTimeout(timer.func, timeout);\n        }\n    }\n}\n\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        const bytes = _parseBytes(result, start);\n        if (bytes) { return toUtf8String(bytes); }\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n    try {\n        const offset = getNumber(dataSlice(result, start, start + 32));\n        const length = getNumber(dataSlice(result, offset, offset + 32));\n\n        return dataSlice(result, offset + 32, offset + 32 + length);\n    } catch (error) { }\n    return null;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = toBeArray(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\nconst empty: Uint8Array = new Uint8Array([ ]);\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>): string {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(empty);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = getBytes(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return concat(result);\n}\n\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\"\nfunction parseOffchainLookup(data: string): CcipArgs {\n    const result: CcipArgs = {\n        sender: \"\", urls: [ ], calldata: \"\", selector: \"\", extraData: \"\", errorArgs: [ ]\n    };\n\n    assert(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n        reason: \"insufficient OffchainLookup data\"\n    });\n\n    const sender = dataSlice(data, 0, 32);\n    assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = dataSlice(sender, 12);\n\n    // Read the URLs from the response\n    try {\n        const urls: Array<string> = [];\n        const urlsOffset = getNumber(dataSlice(data, 32, 64));\n        const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n        const urlsData = dataSlice(data, urlsOffset + 32);\n        for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) { throw new Error(\"abort\"); }\n            urls.push(url);\n        }\n        result.urls = urls;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup urls\"\n        });\n    }\n\n    // Get the CCIP calldata to forward\n    try {\n        const calldata = _parseBytes(data, 64);\n        if (calldata == null) { throw new Error(\"abort\"); }\n        result.calldata = calldata;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup calldata\"\n        });\n    }\n\n    // Get the callbackSelector (bytes4)\n    assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = dataSlice(data, 96, 100);\n\n    // Get the extra data to send back to the contract as context\n    try {\n        const extraData = _parseBytes(data, 128);\n        if (extraData == null) { throw new Error(\"abort\"); }\n        result.extraData = extraData;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup extraData\"\n        });\n    }\n\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k) => (<any>result)[k])\n\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}