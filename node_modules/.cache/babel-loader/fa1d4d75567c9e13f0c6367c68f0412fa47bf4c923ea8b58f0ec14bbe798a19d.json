{"ast":null,"code":"\"use strict\";\n\n/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningKey = void 0;\nconst secp256k1 = __importStar(require(\"@noble/secp256k1\"));\nconst index_js_1 = require(\"../utils/index.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst signature_js_1 = require(\"./signature.js\");\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n  return (0, index_js_1.getBytes)((0, hmac_js_1.computeHmac)(\"sha256\", key, (0, index_js_1.concat)(messages)));\n};\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nclass SigningKey {\n  #privateKey;\n  /**\n   *  Creates a new **SigningKey** for %%privateKey%%.\n   */\n  constructor(privateKey) {\n    (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n    this.#privateKey = (0, index_js_1.hexlify)(privateKey);\n  }\n  /**\n   *  The private key.\n   */\n  get privateKey() {\n    return this.#privateKey;\n  }\n  /**\n   *  The uncompressed public key.\n   *\n   * This will always begin with the prefix ``0x04`` and be 132\n   * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n   */\n  get publicKey() {\n    return SigningKey.computePublicKey(this.#privateKey);\n  }\n  /**\n   *  The compressed public key.\n   *\n   *  This will always begin with either the prefix ``0x02`` or ``0x03``\n   *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n   *  nibbles)\n   */\n  get compressedPublicKey() {\n    return SigningKey.computePublicKey(this.#privateKey, true);\n  }\n  /**\n   *  Return the signature of the signed %%digest%%.\n   */\n  sign(digest) {\n    (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n    const [sigDer, recid] = secp256k1.signSync((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(this.#privateKey), {\n      recovered: true,\n      canonical: true\n    });\n    const sig = secp256k1.Signature.fromHex(sigDer);\n    return signature_js_1.Signature.from({\n      r: (0, index_js_1.toBeHex)(\"0x\" + sig.r.toString(16), 32),\n      s: (0, index_js_1.toBeHex)(\"0x\" + sig.s.toString(16), 32),\n      v: recid ? 0x1c : 0x1b\n    });\n  }\n  /**\n   *  Returns the [[link-wiki-ecdh]] shared secret between this\n   *  private key and the %%other%% key.\n   *\n   *  The %%other%% key may be any type of key, a raw public key,\n   *  a compressed/uncompressed pubic key or aprivate key.\n   *\n   *  Best practice is usually to use a cryptographic hash on the\n   *  returned value before using it as a symetric secret.\n   *\n   *  @example:\n   *    sign1 = new SigningKey(id(\"some-secret-1\"))\n   *    sign2 = new SigningKey(id(\"some-secret-2\"))\n   *\n   *    // Notice that privA.computeSharedSecret(pubB)...\n   *    sign1.computeSharedSecret(sign2.publicKey)\n   *    //_result:\n   *\n   *    // ...is equal to privB.computeSharedSecret(pubA).\n   *    sign2.computeSharedSecret(sign1.publicKey)\n   *    //_result:\n   */\n  computeSharedSecret(other) {\n    const pubKey = SigningKey.computePublicKey(other);\n    console.log(pubKey);\n    return (0, index_js_1.hexlify)(secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(this.#privateKey), (0, index_js_1.getBytes)(pubKey)));\n  }\n  /**\n   *  Compute the public key for %%key%%, optionally %%compressed%%.\n   *\n   *  The %%key%% may be any type of key, a raw public key, a\n   *  compressed/uncompressed public key or private key.\n   *\n   *  @example:\n   *    sign = new SigningKey(id(\"some-secret\"));\n   *\n   *    // Compute the uncompressed public key for a private key\n   *    SigningKey.computePublicKey(sign.privateKey)\n   *    //_result:\n   *\n   *    // Compute the compressed public key for a private key\n   *    SigningKey.computePublicKey(sign.privateKey, true)\n   *    //_result:\n   *\n   *    // Compute the uncompressed public key\n   *    SigningKey.computePublicKey(sign.publicKey, false);\n   *    //_result:\n   *\n   *    // Compute the Compressed a public key\n   *    SigningKey.computePublicKey(sign.publicKey, true);\n   *    //_result:\n   */\n  static computePublicKey(key, compressed) {\n    let bytes = (0, index_js_1.getBytes)(key, \"key\");\n    // private key\n    if (bytes.length === 32) {\n      const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n      return (0, index_js_1.hexlify)(pubKey);\n    }\n    // raw public key; use uncompressed key with 0x04 prefix\n    if (bytes.length === 64) {\n      const pub = new Uint8Array(65);\n      pub[0] = 0x04;\n      pub.set(bytes, 1);\n      bytes = pub;\n    }\n    const point = secp256k1.Point.fromHex(bytes);\n    return (0, index_js_1.hexlify)(point.toRawBytes(compressed));\n  }\n  /**\n   *  Returns the public key for the private key which produced the\n   *  %%signature%% for the given %%digest%%.\n   *\n   *  @example:\n   *    key = new SigningKey(id(\"some-secret\"))\n   *    digest = id(\"hello world\")\n   *    sig = key.sign(digest)\n   *\n   *    // Notice the signer public key...\n   *    key.publicKey\n   *    //_result:\n   *\n   *    // ...is equal to the recovered public key\n   *    SigningKey.recoverPublicKey(digest, sig)\n   *    //_result:\n   *\n   */\n  static recoverPublicKey(digest, signature) {\n    (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n    const sig = signature_js_1.Signature.from(signature);\n    const der = secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s]))).toDERRawBytes();\n    const pubKey = secp256k1.recoverPublicKey((0, index_js_1.getBytesCopy)(digest), der, sig.yParity);\n    (0, index_js_1.assertArgument)(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n    return (0, index_js_1.hexlify)(pubKey);\n  }\n  /**\n   *  Returns the point resulting from adding the ellipic curve points\n   *  %%p0%% and %%p1%%.\n   *\n   *  This is not a common function most developers should require, but\n   *  can be useful for certain privacy-specific techniques.\n   *\n   *  For example, it is used by [[HDNodeWallet]] to compute child\n   *  addresses from parent public keys and chain codes.\n   */\n  static addPoints(p0, p1, compressed) {\n    const pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n    const pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n    return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n  }\n}\nexports.SigningKey = SigningKey;","map":{"version":3,"names":["secp256k1","__importStar","require","index_js_1","hmac_js_1","signature_js_1","utils","hmacSha256Sync","key","_len","arguments","length","messages","Array","_key","getBytes","computeHmac","concat","SigningKey","privateKey","constructor","assertArgument","dataLength","hexlify","publicKey","computePublicKey","compressedPublicKey","sign","digest","sigDer","recid","signSync","getBytesCopy","recovered","canonical","sig","Signature","fromHex","from","r","toBeHex","toString","s","v","computeSharedSecret","other","pubKey","console","log","getSharedSecret","compressed","bytes","getPublicKey","pub","Uint8Array","set","point","Point","toRawBytes","recoverPublicKey","signature","der","fromCompact","toDERRawBytes","yParity","addPoints","p0","p1","pub0","substring","pub1","add","toHex","exports"],"sources":["/Users/oguzhansenol/Developer/Repositories/lottery-project-interface/node_modules/ethers/src.ts/crypto/signing-key.ts"],"sourcesContent":["/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\n\nimport * as secp256k1 from \"@noble/secp256k1\";\n\nimport {\n    concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex,\n    assertArgument\n} from \"../utils/index.js\";\n\nimport { computeHmac } from \"./hmac.js\";\nimport { Signature } from \"./signature.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type { SignatureLike } from \"./index.js\";\n\n\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function(key: Uint8Array, ...messages: Array<Uint8Array>): Uint8Array {\n    return getBytes(computeHmac(\"sha256\", key, concat(messages)));\n}\n\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n    #privateKey: string;\n\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey: BytesLike) {\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = hexlify(privateKey);\n    }\n\n    /**\n     *  The private key.\n     */\n    get privateKey(): string { return this.#privateKey; }\n\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey(): string { return SigningKey.computePublicKey(this.#privateKey); }\n\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey(): string { return SigningKey.computePublicKey(this.#privateKey, true); }\n\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest: BytesLike): Signature {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n\n        const [ sigDer, recid ] = secp256k1.signSync(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            recovered: true,\n            canonical: true\n        });\n\n        const sig = secp256k1.Signature.fromHex(sigDer);\n        return Signature.from({\n            r: toBeHex(\"0x\" + sig.r.toString(16), 32),\n            s: toBeHex(\"0x\" + sig.s.toString(16), 32),\n            v: (recid ? 0x1c: 0x1b)\n        });\n    }\n\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other: BytesLike): string {\n        const pubKey = SigningKey.computePublicKey(other);\n        console.log(pubKey);\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey)));\n    }\n\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key: BytesLike, compressed?: boolean): string {\n        let bytes = getBytes(key, \"key\");\n\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return hexlify(pubKey);\n        }\n\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n\n        const point = secp256k1.Point.fromHex(bytes);\n        return hexlify(point.toRawBytes(compressed));\n    }\n\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest: BytesLike, signature: SignatureLike): string {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n\n        const sig = Signature.from(signature);\n        const der = secp256k1.Signature.fromCompact(getBytesCopy(concat([ sig.r, sig.s ]))).toDERRawBytes();\n\n        const pubKey = secp256k1.recoverPublicKey(getBytesCopy(digest), der, sig.yParity);\n        assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n\n        return hexlify(pubKey);\n    }\n\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0: BytesLike, p1: BytesLike, compressed?: boolean): string {\n        const pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed)\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}